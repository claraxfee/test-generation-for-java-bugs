/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 02:35:48 GMT 2025
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(253);
      Double double0 = Double.valueOf((double) 253);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      List<Pair<Integer, Double>> list0 = List.of(pair0, pair0, pair0, pair0, pair0, pair0, pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(list0);
      discreteDistribution0.reseedRandomGenerator(253);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer((-32768));
      Double double0 = Double.valueOf((double) (-32768));
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      List<Pair<Integer, Double>> list0 = List.of(pair0, pair0, pair0, pair0, pair0, pair0, pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -32,768 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(243);
      Double double0 = Double.valueOf((double) 243);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      List<Pair<Integer, Double>> list0 = List.of(pair0, pair0, pair0, pair0, pair0, pair0, pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(list0);
      double double1 = discreteDistribution0.probability(integer0);
      assertEquals(0.9999999999999998, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Integer integer0 = new Integer(253);
      Double double0 = Double.valueOf((double) 253);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      List<Pair<Integer, Double>> list0 = List.of(pair0, pair0, pair0, pair0, pair0, pair0, pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(list0);
      double double1 = discreteDistribution0.probability((Integer) null);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Double double0 = Double.valueOf((double) 253);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      List<Pair<Integer, Double>> list0 = List.of(pair0, pair0, pair0, pair0, pair0, pair0, pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(list0);
      double double1 = discreteDistribution0.probability((Integer) null);
      assertEquals(0.9999999999999998, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer integer0 = new Integer(296);
      Double double0 = Double.valueOf((double) 296);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      List<Pair<Integer, Double>> list0 = List.of(pair0, pair0, pair0, pair0, pair0, pair0, pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(list0);
      Integer integer1 = new Integer((-266789928));
      double double1 = discreteDistribution0.probability(integer1);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Integer integer0 = new Integer(253);
      Double double0 = Double.valueOf((double) 253);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      List<Pair<Integer, Double>> list0 = List.of(pair0, pair0, pair0, pair0, pair0, pair0, pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(list0);
      List<Pair<Integer, Double>> list1 = discreteDistribution0.getSamples();
      assertEquals(7, list1.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Integer integer0 = new Integer(253);
      Double double0 = Double.valueOf((double) 253);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      List<Pair<Integer, Double>> list0 = List.of(pair0, pair0, pair0, pair0, pair0, pair0, pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(list0);
      Integer[] integerArray0 = discreteDistribution0.sample(253);
      assertEquals(253, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Integer integer0 = new Integer(243);
      Double double0 = Double.valueOf((double) 243);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      List<Pair<Integer, Double>> list0 = List.of(pair0, pair0, pair0, pair0, pair0, pair0, pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(list0);
      try { 
        discreteDistribution0.sample((-792));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-792)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }
}
